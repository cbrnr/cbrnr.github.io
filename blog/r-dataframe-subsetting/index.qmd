---
title: Subsetting data frames in R
date: 2023-11-29
description: Selecting rows and columns from a data frame are basic data manipulation operations. In this post, I show several options for creating subsets of data frames in R, and I also point out important differences between classic `data.frame` and Tidyverse `tibble` objects.
categories:
  - R
  - Basics
image: title-dataframe.webp
---

## Introduction

Data frames are one of the most important data structures for representing tabular data. Base R includes the tried and tested `data.frame` type, which is technically a list of equal-length vectors (where each vector corresponds to a column in the data frame). The [tibble](https://tibble.tidyverse.org) package (part of the [Tidyverse](https://www.tidyverse.org)) offers a slightly tweaked data frame type called `tibble`. In practical data analysis pipelines, we frequently create subsets of the data frame, for example by selecting one or more columns and/or rows. In most situations, the `data.frame` and `tibble` types are interchangeable. However, there are subtle differences in the context of subsetting, which I will highlight in this post.

Subsetting data frames is slightly more challenging than subsetting vectors (see [this post](../r-vector-subsetting/index.qmd)), mainly because there is a multitude of available (and partly redundant) options. We'll start with a small data frame `df` consisting of four rows and three columns:

```{r}
(df = data.frame(first=1:4, second=seq(pi, pi + 3), third=LETTERS[1:4]))
```

This is a classic `data.frame`, so let's also create a `tibble` with identical contents:

```{r}
(tf = tibble::as_tibble(df))
```


## Selecting a single column

In the following examples, we will explore different options to select the second column (named `"second"`).


### The `$` operator

We'll start with the `$` operator, which extracts a single column by name as follows:

```{r}
df$second  # vector
df$"second"  # vector
```

We can enclose the desired column name in quotes, but the first variant without quotes is more common. In either case, R returns the single column as a basic vector. This is also true when working with a `tibble`:

```{r}
tf$second  # vector
tf$"second"  # vector
```

The `$` notation is convenient for interactive exploration, because we don't have to type a lot of extra characters (except for the `$` sign). In addition, RStudio offers auto-completion of matching column names in its console.

:::{.callout-important}
Subsetting a `data.frame` with `$` performs partial matching. This means that R will return the first column that partially matches the given name, for example:

```{r}
df$s  # extracts column "second"
```

R will happily return `df$second` in this example. You can learn more about `$` by typing `` ?`$` `` in the interactive console.
:::

The `$` operator applied to a `tibble` does *not* perform partial matching. Instead, the following example will result in `NULL` and raise a warning:

```{r}
tf$s  # returns NULL (no partial matching)
```

It is easy to shoot yourself in the foot with partial matching. Therefore, I advise against using the `$` notation when working with `data.frame` objects.


### The `[[]]` operator

Another way to select a single column uses double square brackets notation `[[]]`. We can specify either the position or the name of the desired column:

```{r}
df[[2]]  # vector
df[["second"]]  # vector
tf[[2]]  # vector
tf[["second"]]  # vector
```

Both `data.frame` and `tibble` objects return the desired column as a vector.

:::{.callout-note}
If you really want, you can enable partial matching for `data.frame` types as follows (but you probably don't want to do this):

```{r}
df[["s", exact=FALSE]]  # vector (partial matching)
```
:::


### The `[]` operator

Interestingly, we can also select a single column with single square bracket notation `[]`, which we've already seen with atomic vectors:

```{r}
df[2]  # data.frame
df["second"]  # data.frame
tf[2]  # tibble
tf["second"]  # tibble
```

The important difference here is that the resulting subset is a *data frame* (depending on the original type either a `data.frame` or a `tibble`) and not a vector, even though we select only a single column.


## Selecting multiple columns

If we want to select *multiple* columns, we have to use single square bracket notation `[]`. We can specify both a row selection and a column selection, separated by a comma, within the square brackets. However, we can omit either or both indices to select entire columns or rows.

Let's start with selecting a single column. For example, we can grab the second column by omitting the row selection:

```{r}
df[, 2]  # vector
df[, "second"]  # vector
tf[, 2]  # tibble
tf[, "second"]  # tibble
```

:::{.callout-important}
A `data.frame` will return the column as a vector, whereas a `tibble` will return a `tibble` (with a single column):
:::

:::{.callout-note}
When selecting a single column, we can set the returned value to be a vector or a single-column data frame with the `drop` argument (`drop=TRUE` means vector, whereas `drop=FALSE` means data frame):

```{r}
df[, 2, drop=FALSE]  # data.frame
df[, "second", drop=FALSE]  # data.frame
tf[, 2, drop=TRUE]  # vector
tf[, "second", drop=TRUE]  # vector
```

I've rarely seen this in practice, so I don't recommend using it unless there is no other option.
:::

In contrast to `$` and `[[]]`, single square bracket notation `[]` allows us to select multiple columns:

```{r}
df[, c("second", "third")]
df[, c(2, 3)]
df[c("second", "third")]
df[c(2, 3)]

tf[, c("second", "third")]
tf[, c(2, 3)]
tf[c("second", "third")]
tf[c(2, 3)]
```

The returned subset will *always* be a data frame.

:::{.callout-tip}
A `tibble` is more consistent than a `data.frame` when using `[]`-style subsetting, because the result will *always* be a `tibble`. In contrast, we get a vector when selecting a single column and a `data.frame` when selecting multiple columns with `data.frame` objects.
:::


## Selecting rows

Selecting one or more rows is also known as filtering. We use the row index (the value *before* the comma) within single square brackets `[]` to create the desired subset. The result will always be a data frame.

For example, we can select the second row as follows (don't forget the trailing comma):

```{r}
df[2, ]  # data.frame
tf[2, ]  # tibble
```

Similarly, we can also select multiple rows:

```{r}
df[c(2, 3), ]  # data.frame
tf[c(2, 3), ]  # tibble
```

Logical subsetting is especially useful for filtering rows. The following example creates a subset by selecting rows where the values in the second column are greater than 5:

```{r}
df[df[, 2] > 5, ]
tf[tf[, 2] > 5, ]
```
